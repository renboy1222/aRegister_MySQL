/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.aldrin.aregister.gui;

import com.aldrin.aregister.dao.impl.CivilStatusDAOImpl;
import com.aldrin.aregister.dao.impl.ClassEnrollDAOImpl;
import com.aldrin.aregister.dao.impl.ClassOfferDAOImpl;
import com.aldrin.aregister.dao.impl.CourseDAOImpl;
import com.aldrin.aregister.dao.impl.DBConnection;
import com.aldrin.aregister.dao.impl.SchoolYearDAOImpl;
import com.aldrin.aregister.dao.impl.StudentDAOImpl;
import com.aldrin.aregister.model.ClassEnroll;
import com.aldrin.aregister.model.ClassOffer;
import com.aldrin.aregister.model.SchoolYear;
import com.aldrin.aregister.model.Student;
import com.aldrin.aregister.model.UserAccount;
import com.aldrin.aregister.util.ComboBoxAutoFill;
import com.aldrin.aregister.util.ComboBoxList;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import java.awt.AlphaComposite;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.text.JTextComponent;
import lombok.Getter;
import lombok.Setter;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;

/**
 *
 * @author ALRIN B.C.
 */
@Setter
@Getter
public class JDialogEnrollStudent extends javax.swing.JDialog implements ActionListener, MouseListener {

    /**
     * Creates new form JDialogEnrollStudent
     */
    private CourseDAOImpl courseDAOImpl = new CourseDAOImpl();
    private StudentDAOImpl studentDAOImpl = new StudentDAOImpl();
    private CivilStatusDAOImpl civilStatusDAOImpl = new CivilStatusDAOImpl();
    private ClassOfferDAOImpl classOfferDAOImpl = new ClassOfferDAOImpl();
    private JTextComponent editor;
    private String removeConfirmation;
    private JFrameRegister jFrameRegister;
    private Student student = new Student();
    private DecimalFormat df = new DecimalFormat("##,##0.00");
    private Long classOfferId;
    private String subjectSelected = "";

    public JDialogEnrollStudent(com.aldrin.aregister.gui.JFrameRegister jFrameRegister, boolean modal) {
        super(jFrameRegister, modal);
        initComponents();

        comboBoxStudent();
        comboBoxCourse();
        comboBoxCivilStatus();
        jComboBoxStudentID.setEditable(true);
        editor = (JTextComponent) jComboBoxStudentID.getEditor().getEditorComponent();
        editor.addKeyListener(new JDialogEnrollStudent.ComboBoxItemKeyListener());
        editor.setDocument(new ComboBoxAutoFill(jComboBoxStudentID));
        jComboBoxStudentID.addActionListener(this);

        comboBoxClassCode();
        jComboBoxClassCode.setEditable(true);
        editor = (JTextComponent) jComboBoxClassCode.getEditor().getEditorComponent();
        editor.addKeyListener(new JDialogEnrollStudent.ComboBoxItemKeyListener());
        editor.setDocument(new ComboBoxAutoFill(jComboBoxClassCode));
        jComboBoxClassCode.addActionListener(this);

        setTable();
        jComboBoxClassCode.setEnabled(false);
        jButtonAddSubject.setEnabled(false);
        jButtonRemoveSubject.setEnabled(false);
        jButtonDropSubject.setEnabled(false);
        this.jFrameRegister = jFrameRegister;
        jButtonPrintCOR.setEnabled(false);
        jButtonRegister.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabelPicture = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jComboBoxStudentID = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jTextFieldSurname = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jTextFieldFirstname = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jTextFieldMiddlename = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jComboBoxCourse = new javax.swing.JComboBox<>();
        jPanel10 = new javax.swing.JPanel();
        jComboBoxGender = new javax.swing.JComboBox<>();
        jPanel11 = new javax.swing.JPanel();
        jComboBoxCivilStatus = new javax.swing.JComboBox<>();
        jPanel12 = new javax.swing.JPanel();
        jTextFieldUnits = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jTextFieldAge = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jTextFieldEnrolledCounter = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxClassCode = new javax.swing.JComboBox<>();
        jButtonAddSubject = new javax.swing.JButton();
        jButtonRemoveSubject = new javax.swing.JButton();
        jPanel23 = new javax.swing.JPanel();
        jTextFieldTuitionFee = new javax.swing.JTextField();
        jButtonDropSubject = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableClassOffer = new javax.swing.JTable();
        jPanel18 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jButtonRegister = new javax.swing.JButton(new FlatSVGIcon("svg/add.svg",32,32));
        jLabel2 = new javax.swing.JLabel();
        jButtonPrintCOR = new javax.swing.JButton(new FlatSVGIcon("svg/print.svg",32,32));
        jPanel22 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("REGISTER STUDENT");
        setResizable(false);

        jPanel1.setPreferredSize(new java.awt.Dimension(150, 220));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)), "PHOTO"));
        jPanel2.setMaximumSize(new java.awt.Dimension(215, 225));
        jPanel2.setMinimumSize(new java.awt.Dimension(215, 225));
        jPanel2.setPreferredSize(new java.awt.Dimension(215, 225));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jLabelPicture.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelPictureMouseClicked(evt);
            }
        });
        jPanel3.add(jLabelPicture, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel4.setPreferredSize(new java.awt.Dimension(210, 0));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 140, 160));

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder("STUDENT ID"));
        jPanel17.setPreferredSize(new java.awt.Dimension(200, 50));
        jPanel17.setLayout(new java.awt.BorderLayout());
        jPanel17.add(jComboBoxStudentID, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(155, 0, 405, 50));

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("SURNAME"));
        jPanel7.setPreferredSize(new java.awt.Dimension(200, 50));
        jPanel7.setLayout(new java.awt.BorderLayout());

        jTextFieldSurname.setPreferredSize(new java.awt.Dimension(64, 30));
        jPanel7.add(jTextFieldSurname, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel7);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("FIRST NAME"));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 50));
        jPanel6.setLayout(new java.awt.BorderLayout());

        jTextFieldFirstname.setPreferredSize(new java.awt.Dimension(64, 30));
        jPanel6.add(jTextFieldFirstname, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel6);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("MIDDLE NAME"));
        jPanel8.setPreferredSize(new java.awt.Dimension(200, 50));
        jPanel8.setLayout(new java.awt.BorderLayout());

        jTextFieldMiddlename.setPreferredSize(new java.awt.Dimension(64, 30));
        jPanel8.add(jTextFieldMiddlename, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel8);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("COURSE"));
        jPanel9.setPreferredSize(new java.awt.Dimension(200, 50));
        jPanel9.setLayout(new java.awt.BorderLayout());

        jComboBoxCourse.setPreferredSize(new java.awt.Dimension(72, 32));
        jPanel9.add(jComboBoxCourse, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel9);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("GENDER"));
        jPanel10.setPreferredSize(new java.awt.Dimension(200, 50));
        jPanel10.setLayout(new java.awt.BorderLayout());

        jComboBoxGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MALE", "FEMALE", " " }));
        jComboBoxGender.setPreferredSize(new java.awt.Dimension(72, 32));
        jPanel10.add(jComboBoxGender, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel10);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("CIVIL STATUS"));
        jPanel11.setPreferredSize(new java.awt.Dimension(200, 50));
        jPanel11.setLayout(new java.awt.BorderLayout());

        jComboBoxCivilStatus.setPreferredSize(new java.awt.Dimension(72, 32));
        jPanel11.add(jComboBoxCivilStatus, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel11);

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, 630, 120));

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("UNITS"));
        jPanel12.setPreferredSize(new java.awt.Dimension(200, 50));
        jPanel12.setLayout(new java.awt.BorderLayout());

        jTextFieldUnits.setPreferredSize(new java.awt.Dimension(64, 30));
        jPanel12.add(jTextFieldUnits, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(785, 110, 70, 50));

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("AGE"));
        jPanel13.setPreferredSize(new java.awt.Dimension(200, 50));
        jPanel13.setLayout(new java.awt.BorderLayout());

        jTextFieldAge.setPreferredSize(new java.awt.Dimension(64, 30));
        jPanel13.add(jTextFieldAge, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(785, 55, 70, 50));

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder("ENROLL"));
        jPanel14.setPreferredSize(new java.awt.Dimension(200, 50));
        jPanel14.setLayout(new java.awt.BorderLayout());

        jTextFieldEnrolledCounter.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jTextFieldEnrolledCounter.setPreferredSize(new java.awt.Dimension(64, 30));
        jPanel14.add(jTextFieldEnrolledCounter, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(565, 0, 200, 50));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("SUBJECT CODE:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 180, 90, 30));

        jPanel1.add(jComboBoxClassCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(97, 180, 255, 30));

        jButtonAddSubject.setIcon(new FlatSVGIcon("svg/add.svg",24,24));
        jButtonAddSubject.setText("ADD");
        jButtonAddSubject.setMargin(new java.awt.Insets(2, 2, 3, 2));
        jButtonAddSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddSubjectActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonAddSubject, new org.netbeans.lib.awtextra.AbsoluteConstraints(365, 180, 70, 30));

        jButtonRemoveSubject.setIcon(new FlatSVGIcon("svg/minus.svg",24,24));
        jButtonRemoveSubject.setText("REMOVE");
        jButtonRemoveSubject.setMargin(new java.awt.Insets(2, 2, 3, 2));
        jButtonRemoveSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveSubjectActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonRemoveSubject, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 180, 80, 30));

        jPanel23.setBorder(javax.swing.BorderFactory.createTitledBorder("TUITION AMOUNT DUE"));
        jPanel23.setPreferredSize(new java.awt.Dimension(200, 50));
        jPanel23.setLayout(new java.awt.BorderLayout());

        jTextFieldTuitionFee.setPreferredSize(new java.awt.Dimension(64, 30));
        jPanel23.add(jTextFieldTuitionFee, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(875, 110, 140, 50));

        jButtonDropSubject.setIcon(new FlatSVGIcon("svg/cancel.svg",24,24));
        jButtonDropSubject.setText("DROP");
        jButtonDropSubject.setMargin(new java.awt.Insets(2, 2, 3, 2));
        jButtonDropSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDropSubjectActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonDropSubject, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 180, 70, 30));

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel15.setLayout(new java.awt.BorderLayout());

        jPanel16.setLayout(new java.awt.BorderLayout());

        jTableClassOffer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableClassOffer);

        jPanel16.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel15.add(jPanel16, java.awt.BorderLayout.CENTER);

        jPanel18.setPreferredSize(new java.awt.Dimension(1025, 60));
        jPanel18.setLayout(new java.awt.BorderLayout());

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 10));

        jButtonRegister.setText("<html><center>Register<br><h4 style=\"color:red; padding:0; margin:0;\">[F5]</h4></center></html>");
        jButtonRegister.setFocusable(false);
        jButtonRegister.setMargin(new java.awt.Insets(2, 2, 3, 2));
        jButtonRegister.setPreferredSize(new java.awt.Dimension(95, 40));
        jButtonRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegisterActionPerformed(evt);
            }
        });
        jPanel21.add(jButtonRegister);

        jLabel2.setPreferredSize(new java.awt.Dimension(20, 0));
        jPanel21.add(jLabel2);

        jButtonPrintCOR.setText("<html><center>Print COR<br><h4 style=\"color:red; padding:0; margin:0;\">[F5]</h4></center></html>");
        jButtonPrintCOR.setFocusable(false);
        jButtonPrintCOR.setMargin(new java.awt.Insets(2, 2, 3, 2));
        jButtonPrintCOR.setPreferredSize(new java.awt.Dimension(95, 40));
        jButtonPrintCOR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintCORActionPerformed(evt);
            }
        });
        jPanel21.add(jButtonPrintCOR);

        jPanel18.add(jPanel21, java.awt.BorderLayout.CENTER);

        jPanel22.setPreferredSize(new java.awt.Dimension(0, 60));

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );

        jPanel18.add(jPanel22, java.awt.BorderLayout.WEST);

        jPanel15.add(jPanel18, java.awt.BorderLayout.SOUTH);

        jPanel19.setPreferredSize(new java.awt.Dimension(10, 342));

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel15.add(jPanel19, java.awt.BorderLayout.WEST);

        jPanel20.setPreferredSize(new java.awt.Dimension(10, 342));

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 292, Short.MAX_VALUE)
        );

        jPanel15.add(jPanel20, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel15, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(1040, 580));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabelPictureMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelPictureMouseClicked

    }//GEN-LAST:event_jLabelPictureMouseClicked

    private void jButtonRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegisterActionPerformed
        int response = JOptionPane.showConfirmDialog(jFrameRegister, "Are you sure to register " + jTextFieldSurname.getText() + ", " + jTextFieldFirstname.getText() + " " + jTextFieldMiddlename.getText().substring(0, 1) + ". ?", "Register confirmation!!", JOptionPane.YES_NO_OPTION);
        if (response == JOptionPane.YES_OPTION) {
            registerStudent();
            ComboBoxList studentId = (ComboBoxList) this.jComboBoxStudentID.getSelectedItem();
            Student student = new Student();
            student.setId(studentId.getId());
            ClassEnroll classEnroll = new ClassEnroll();
            classEnroll.setStudent(student);

            SchoolYearDAOImpl syDAOImpl = new SchoolYearDAOImpl();
            SchoolYear syID = syDAOImpl.getCurrentSchoolYearIDAndTuitionID();
            selectRegisteredStudent(classEnroll, syID);
            if (jTableClassOffer.getRowCount() > 0) {
                jTextFieldEnrolledCounter.setText("REGISTERED");
                jTextFieldEnrolledCounter.setForeground(new java.awt.Color(0, 102, 51));
                jButtonPrintCOR.setEnabled(true);
                jButtonRegister.setEnabled(false);
            } else {
                jTextFieldEnrolledCounter.setText("UNREGISTER");
                jTextFieldEnrolledCounter.setForeground(new java.awt.Color(204, 0, 0));
                jButtonPrintCOR.setEnabled(false);
                jButtonRegister.setEnabled(false);
            }

            jTextFieldTuitionFee.setText(String.valueOf(df.format(classEnrollDAOImpl.selectStudentByTuition(student.getId()))));
        }
    }//GEN-LAST:event_jButtonRegisterActionPerformed

    private void jButtonPrintCORActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrintCORActionPerformed
        autoPrint();
    }//GEN-LAST:event_jButtonPrintCORActionPerformed

    private void jButtonAddSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddSubjectActionPerformed
        addSubjectToTable();
        autoCalulateUnits();
        jButtonRegister.setEnabled(true);
    }//GEN-LAST:event_jButtonAddSubjectActionPerformed

    private void jButtonRemoveSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveSubjectActionPerformed

        int response = JOptionPane.showConfirmDialog(this, "Are you sure to remove " + getRemoveConfirmation() + " ?", "Remove subject confirmation", JOptionPane.YES_NO_OPTION);
        if (response == JOptionPane.YES_OPTION) {
            removeClass();
            autoCalulateUnits();
            studentEnrolledSubject();
            jButtonRemoveSubject.setEnabled(false);
            jButtonDropSubject.setEnabled(false);
        }
    }//GEN-LAST:event_jButtonRemoveSubjectActionPerformed

    private void jButtonDropSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDropSubjectActionPerformed
        int response = JOptionPane.showConfirmDialog(this, "Are you sure to drop  " + this.getSubjectSelected() + " ?", "Drop subject confirmation", JOptionPane.YES_NO_OPTION);
        if (response == JOptionPane.YES_OPTION) {
            ComboBoxList studentId = (ComboBoxList) this.jComboBoxStudentID.getSelectedItem();
            classEnrollDAOImpl.updateDropSubject(studentId.getId(), this.getClassOfferId());
            ClassEnroll classEnroll = new ClassEnroll();
            Student s = new Student();
            s.setId(studentId.getId());
            classEnroll.setStudent(s);
            SchoolYearDAOImpl syDAOImpl = new SchoolYearDAOImpl();
            SchoolYear syID = syDAOImpl.getCurrentSchoolYearIDAndTuitionID();
            selectRegisteredStudent(classEnroll, syID);
            jButtonDropSubject.setEnabled(false);
        }
    }//GEN-LAST:event_jButtonDropSubjectActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddSubject;
    private javax.swing.JButton jButtonDropSubject;
    private javax.swing.JButton jButtonPrintCOR;
    private javax.swing.JButton jButtonRegister;
    private javax.swing.JButton jButtonRemoveSubject;
    private javax.swing.JComboBox<Object> jComboBoxCivilStatus;
    private javax.swing.JComboBox<Object> jComboBoxClassCode;
    private javax.swing.JComboBox<Object> jComboBoxCourse;
    private javax.swing.JComboBox<Object> jComboBoxGender;
    private javax.swing.JComboBox<Object> jComboBoxStudentID;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelPicture;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableClassOffer;
    private javax.swing.JTextField jTextFieldAge;
    private javax.swing.JTextField jTextFieldEnrolledCounter;
    private javax.swing.JTextField jTextFieldFirstname;
    private javax.swing.JTextField jTextFieldMiddlename;
    private javax.swing.JTextField jTextFieldSurname;
    private javax.swing.JTextField jTextFieldTuitionFee;
    private javax.swing.JTextField jTextFieldUnits;
    // End of variables declaration//GEN-END:variables
    private void comboBoxCourse() {
        courseDAOImpl.comboBoxCourse();
        jComboBoxCourse.removeAllItems();
        for (ComboBoxList a : courseDAOImpl.getList()) {
            this.jComboBoxCourse.addItem(a);
        }
    }

    private void comboBoxStudent() {
        studentDAOImpl.comboBoxStudentID();
        jComboBoxStudentID.removeAllItems();
        for (ComboBoxList a : studentDAOImpl.getList()) {
            this.jComboBoxStudentID.addItem(a);
        }
    }

    private void comboBoxCivilStatus() {
        civilStatusDAOImpl.comboBoxCivilStatus();
        jComboBoxCivilStatus.removeAllItems();
        for (ComboBoxList a : civilStatusDAOImpl.getList()) {
            this.jComboBoxCivilStatus.addItem(a);
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        try {
            if (e.getSource() == jComboBoxStudentID) {
                jButtonAddSubject.setEnabled(true);
                jButtonDropSubject.setEnabled(false);
                jButtonRemoveSubject.setEnabled(false);
                jComboBoxClassCode.setEnabled(true);
                StudentDAOImpl studentDAOImpl = new StudentDAOImpl();
                ComboBoxList studentId = (ComboBoxList) this.jComboBoxStudentID.getSelectedItem();
                Student student = new Student();
                student.setId(studentId.getId());
                // SELECT STUDENT INFO
                Student s = studentDAOImpl.selectStudentInfo(student);
                this.student = student;

                jTextFieldFirstname.setText(s.getFirstname());
                jTextFieldSurname.setText(s.getSurname());
                jTextFieldMiddlename.setText(s.getMiddlename());
                if (s.getGender().equals(jComboBoxGender.getSelectedItem().toString())) {
                    jComboBoxGender.setSelectedIndex(0);
                } else {
                    jComboBoxGender.setSelectedIndex(1);
                }

                for (ComboBoxList a : this.courseDAOImpl.getList()) {
                    a.setSelectedId(courseDAOImpl.getList(), String.valueOf(s.getCourse().getId()), jComboBoxCourse);
                }
                for (ComboBoxList a : this.civilStatusDAOImpl.getList()) {
                    a.setSelectedId(civilStatusDAOImpl.getList(), String.valueOf(s.getCivilStatus().getId()), jComboBoxCivilStatus);
                }
                displayPicture(s);
                jTextFieldAge.setText(String.valueOf(studentDAOImpl.selectStudentAge(student)));
                ClassEnroll classEnroll = new ClassEnroll();
                classEnroll.setStudent(student);
                if (student.getId() > 0) {
                    SchoolYearDAOImpl syDAOImpl = new SchoolYearDAOImpl();
                    SchoolYear syID = syDAOImpl.getCurrentSchoolYearIDAndTuitionID();
                    //SELECT STUDENT IF HE IS ENROLL TO THE CURRENT SCHOOL YEAR
                    selectRegisteredStudent(classEnroll, syID);
                    System.out.println("syID:" + syID.getId());
                }
                if (jTableClassOffer.getRowCount() > 0) {
                    jTextFieldEnrolledCounter.setText("REGISTERED");
                    jTextFieldEnrolledCounter.setForeground(new java.awt.Color(0, 102, 51));
                    jButtonPrintCOR.setEnabled(true);
                    jButtonRegister.setEnabled(false);

                } else {
                    jTextFieldEnrolledCounter.setText("UNREGISTER");
                    jTextFieldEnrolledCounter.setForeground(new java.awt.Color(204, 0, 0));
                    jButtonPrintCOR.setEnabled(false);
                    jButtonRegister.setEnabled(false);
                }
                unitsCounter();

                //tuition fee
                jTextFieldTuitionFee.setText(String.valueOf(df.format(classEnrollDAOImpl.selectStudentByTuition(student.getId()))));

            }
        } catch (Exception ex) {
        }
    }

    int IMG_WIDTH = 136;
    int IMG_HEIGHT = 136;

    private void displayPicture(Student student) {
        try {
            byte[] imageData = student.getPhoto();
            ImageIcon imageIcon = new ImageIcon(imageData);

            Image image = imageIcon.getImage();
            int type = BufferedImage.TYPE_INT_ARGB;

            BufferedImage resizedImage = new BufferedImage(IMG_WIDTH, IMG_HEIGHT, type);
            Graphics2D g = resizedImage.createGraphics();
            g.drawImage(image, 0, 0, IMG_WIDTH, IMG_HEIGHT, null);
            g.dispose();
            g.setComposite(AlphaComposite.Src);

            g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
                    RenderingHints.VALUE_INTERPOLATION_BILINEAR);
            g.setRenderingHint(RenderingHints.KEY_RENDERING,
                    RenderingHints.VALUE_RENDER_QUALITY);
            g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);

            jLabelPicture.setIcon(new ImageIcon(resizedImage));//image to label

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    class ComboBoxItemKeyListener extends KeyAdapter {

        public void keyPressed(KeyEvent evt) {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            } else if (evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_A) {
            } else if (evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_D) {
            }
        }
    }

    private void comboBoxClassCode() {

        classOfferDAOImpl.comboBoxClassOffer();
        jComboBoxClassCode.removeAllItems();
        for (ComboBoxList a : classOfferDAOImpl.getList()) {
            this.jComboBoxClassCode.addItem(a);
        }
    }

    public DefaultTableModel tableModel = new DefaultTableModel(new Object[]{"CLASS OFFER ID", "#", "CODE", "SUBJECT", "INSTRUCTOR", "ROOM", "DAY", "TIME", "UNITS"}, 0) {
        public Class getColumnClass(int columnIndex) {
            if (columnIndex == 0) {
                return String.class;
            }
            switch (columnIndex) {
                case 1:
                    return Integer.class;
                case 2:
                    return String.class;
                case 3:
                    return String.class;
                case 4:
                    return String.class;
                case 5:
                    return String.class;
                case 6:
                    return String.class;
                case 7:
                    return String.class;
                case 8:
                    return Integer.class;
                default:
                    return String.class;
            }
        }

        public boolean isCellEditable(int row, int col) {
            if (col < 10) {
                return false;

            } else {
                return true;
            }
        }
    };
    private TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(tableModel);

    private void setTable() {
        jTableClassOffer.setCellSelectionEnabled(true);
        jTableClassOffer = new JTable(tableModel);
        jScrollPane1.setViewportView(jTableClassOffer);
        jTableClassOffer.addMouseListener(this);
        jTableClassOffer.setRowSorter(sorter);
        TableColumn hide0 = jTableClassOffer.getColumnModel().getColumn(0);
        hide0.setMinWidth(0);
        hide0.setMaxWidth(0);
        hide0.setPreferredWidth(0);
        TableColumn[] column = new TableColumn[100];
        column[1] = jTableClassOffer.getColumnModel().getColumn(1);
        column[1].setPreferredWidth(30);

        column[2] = jTableClassOffer.getColumnModel().getColumn(2);
        column[2].setPreferredWidth(80);

        column[3] = jTableClassOffer.getColumnModel().getColumn(3);
        column[3].setPreferredWidth(220);

        column[4] = jTableClassOffer.getColumnModel().getColumn(4);
        column[4].setPreferredWidth(160);

        column[5] = jTableClassOffer.getColumnModel().getColumn(5);
        column[5].setPreferredWidth(60);

        column[6] = jTableClassOffer.getColumnModel().getColumn(6);
        column[6].setPreferredWidth(60);

    }

    @Override
    public void mouseClicked(MouseEvent e) {
        if (e.getSource() == jTableClassOffer) {
            if (e.getButton() == MouseEvent.BUTTON1) {
                if (e.getClickCount() == 1) {
                    int row = jTableClassOffer.getSelectedRow();
                    if (row != -1) {
                        Long classId = Long.parseLong(jTableClassOffer.getValueAt(row, 0).toString());
                        String subject = jTableClassOffer.getValueAt(row, 3).toString();
                        setRemoveConfirmation(subject);
                        jButtonRemoveSubject.setEnabled(true);
                        this.setSubjectSelected(subject);
//                      Drop subject
                        ComboBoxList studentId = (ComboBoxList) this.jComboBoxStudentID.getSelectedItem();
                        Student student = new Student();
                        student.setId(studentId.getId());
                        if (classEnrollDAOImpl.selectDisableRegister(student.getId(), classId) == true) {
                            jButtonDropSubject.setEnabled(true);
                            jButtonRemoveSubject.setEnabled(false);
                        } else {
                            jButtonDropSubject.setEnabled(false);
                            jButtonRemoveSubject.setEnabled(true);
                        }
                        this.setClassOfferId(classId);
                    }
                }
            }
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    private void addSubjectToTable() {
        boolean multipleProduct = false;
        ClassOfferDAOImpl classOfferDAOImpl = new ClassOfferDAOImpl();
        ComboBoxList classOfferId = (ComboBoxList) this.jComboBoxClassCode.getSelectedItem();
        ClassOffer classOfferID = new ClassOffer();
        classOfferID.setId(classOfferId.getId());
        ClassOffer co = classOfferDAOImpl.selectClassOffer(classOfferID);
//        "CLASS OFFER ID", "#", "CODE", "SUBJECT", "INSTRUCTOR", "ROOM", "DAY", "TIME", "UNITS"
        String instructor = co.getInstructor().getSurname() + ", " + co.getInstructor().getFirstname() + " " + co.getInstructor().getMiddlename().substring(0, 1) + ".";
        if (jTableClassOffer.getRowCount() == 0) {
            tableModel.addRow(new Object[]{co.getId(), jTableClassOffer.getRowCount() + 1, co.getClass_code(), co.getSubject().getSubject(), instructor, co.getRoom().getRoom(),
                co.getDay().getDay(), co.getTime().getTime(), co.getSubject().getUnit()});
            return;
        } else {
            //test for duplicate subject
            itemCounter:
            for (int i = 0; i < jTableClassOffer.getRowCount(); i++) {
                Long classOfferIdl = Long.parseLong(jTableClassOffer.getValueAt(i, 0).toString());
                if (co.getId() == classOfferIdl) {
                    multipleProduct = false;
                    String subject = jTableClassOffer.getValueAt(i, 3).toString();
                    JOptionPane.showMessageDialog(this, "Subject " + subject + " is already added.", "WARNING MESSAGE", JOptionPane.WARNING_MESSAGE);
                    break itemCounter;
                } else {
                    multipleProduct = true;
                }
            }
            if (multipleProduct == true) {
                tableModel.addRow(new Object[]{co.getId(), jTableClassOffer.getRowCount() + 1, co.getClass_code(), co.getSubject().getSubject(), instructor, co.getRoom().getRoom(),
                    co.getDay().getDay(), co.getTime().getTime(), co.getSubject().getUnit()});
            }
        }

    }

    public void autoCalulateUnits() {
        try {
            int totalUnits = 0;
            for (int i = 0; i < jTableClassOffer.getRowCount(); i++) {
                int unit = Integer.parseInt(jTableClassOffer.getValueAt(i, 8).toString());
                totalUnits = totalUnits + unit;
                jTextFieldUnits.setText(String.valueOf(totalUnits));
            }
            if (tableModel.getRowCount() == 0) {
                jTextFieldUnits.setText("0");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void removeClass() {
        int numRows = jTableClassOffer.getSelectedRows().length;
        if (numRows == 0) {
            jTextFieldUnits.setText("0");
            return;
        }
        for (int i = 0; i < numRows; i++) {
            tableModel.removeRow(jTableClassOffer.getSelectedRow());
        }
    }

    private void registerStudent() {
//        "CLASS OFFER ID", "#", "CODE", "SUBJECT", "INSTRUCTOR", "ROOM", "DAY", "TIME", "UNITS"  
        try {
            ClassEnrollDAOImpl classEnrollDAOImpl = new ClassEnrollDAOImpl();
            ClassEnroll classEnroll = new ClassEnroll();
            Student student = new Student();
            ClassOffer classOffer = new ClassOffer();
            UserAccount userAccount = new UserAccount();
            ComboBoxList studentId = (ComboBoxList) this.jComboBoxStudentID.getSelectedItem();
            student.setId(studentId.getId());
            SchoolYearDAOImpl syDAOImpl = new SchoolYearDAOImpl();
            SchoolYear sy = syDAOImpl.getCurrentSchoolYearIDAndTuitionID();
            classEnroll.setStudent(student);
            userAccount.setId(1L);
            classEnroll.setUserAccount(userAccount);

            for (int i = 0; i < jTableClassOffer.getRowCount(); i++) {
                Long classOfferId = Long.parseLong(jTableClassOffer.getValueAt(i, 0).toString());
                if (classOfferId == classEnrollDAOImpl.selectStudentSubject(classEnroll)) {

                } else {
                    classOffer.setId(classOfferId);
                    classEnroll.setClassOffer(classOffer);
                    classEnrollDAOImpl.addClassEnroll(classEnroll);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private ClassEnrollDAOImpl classEnrollDAOImpl = new ClassEnrollDAOImpl();
    private ArrayList<ClassEnroll> classEnrollList;

    private void selectRegisteredStudent(ClassEnroll classEnroll, SchoolYear schoolYear) {
// "CLASS OFFER ID", "#", "CODE", "SUBJECT", "INSTRUCTOR", "ROOM", "DAY", "TIME", "UNITS"
        tableModel.setRowCount(0);
        classEnrollList = classEnrollDAOImpl.selectStudentIFEnrolled(classEnroll, schoolYear);
        tableModel.setRowCount(0);
        for (ClassEnroll ce : classEnrollList) {
            String instructor = ce.getClassOffer().getInstructor().getSurname() + ", " + ce.getClassOffer().getInstructor().getFirstname() + " " + ce.getClassOffer().getInstructor().getMiddlename().substring(0, 1) + ".";
            tableModel.addRow(new Object[]{ce.getClassOffer().getId(), jTableClassOffer.getRowCount() + 1, ce.getClassOffer().getClass_code(), ce.getClassOffer().getSubject().getSubject(), instructor,
                ce.getClassOffer().getRoom().getRoom(), ce.getClassOffer().getDay().getDay(), ce.getClassOffer().getTime().getTime(), ce.getClassOffer().getSubject().getUnit()});
        }
    }

    private void unitsCounter() {
        int totalUnits = 0;
        for (int i = 0; i < jTableClassOffer.getRowCount(); i++) {
            int unit = Integer.parseInt(jTableClassOffer.getValueAt(i, 8).toString());
            totalUnits = totalUnits + unit;
        }
        jTextFieldUnits.setText(String.valueOf(totalUnits));
    }

    private void studentEnrolledSubject() {
        counter:
        for (int i = 0; i < jTableClassOffer.getRowCount(); i++) {
            Long classOfferId = Long.parseLong(jTableClassOffer.getValueAt(i, 0).toString());
            ComboBoxList studentId = (ComboBoxList) this.jComboBoxStudentID.getSelectedItem();
            student.setId(studentId.getId());
            ClassEnroll classEnroll = new ClassEnroll();
            classEnroll.setStudent(student);
            if (classEnrollDAOImpl.selectDisableRegister(student.getId(), classOfferId) == true) {
                jButtonDropSubject.setEnabled(true);
                jButtonRemoveSubject.setEnabled(false);
                jButtonRegister.setEnabled(false);
            } else {
                jButtonDropSubject.setEnabled(false);
                jButtonRemoveSubject.setEnabled(true);
                jButtonRegister.setEnabled(true);
                break counter;
            }
        }
    }

    public void autoPrint() {
        try {
            DBConnection con = new DBConnection();
            con.getDBConn();
            String fullPath = System.getProperty("user.dir") + "/src/main/resources/reports/cor.jasper";
            Map<String, Object> param = new HashMap<String, Object>();

            ComboBoxList studentId = (ComboBoxList) this.jComboBoxStudentID.getSelectedItem();
            Student student = new Student();
            student.setId(studentId.getId());
            SchoolYearDAOImpl syDAOImpl = new SchoolYearDAOImpl();
            SchoolYear syID = syDAOImpl.getCurrentSchoolYearIDAndTuitionID();
            param.put("STUDENTID", student.getId());
            param.put("SYID", syID.getId());
            JasperPrint jp = JasperFillManager.fillReport(fullPath, param, con.getCon());
            JasperPrintManager.printReport(jp, true); // print to default printer
//            JasperExportManager.exportReportToPdfFile(jp, "C:\\Users\\admin\\Desktop\\userSales.pdf");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
